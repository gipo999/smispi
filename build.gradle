/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
	// Apply the java-library plugin for API and implementation separation.
	id 'java-library'

	// add the spotless plugin for formatting and linting
	id 'com.diffplug.spotless' version '6.25.0'

	// extends the Java plugin to add support for Groovy projects. It can deal with Groovy code, mixed Groovy and Java code, and even pure Java code
	id 'groovy'

	// add the maven-publish plugin to publish to maven central
	id 'maven-publish'

	// https://docs.gradle.org/current/userguide/checkstyle_plugin.html
	// https://medium.com/@raveensr/how-to-add-checkstyle-and-findbugs-plugins-in-a-gradle-based-project-51759aa843be
	// https://github.com/nus-cs2103-AY2021S2/forum/issues/93
	// https://stackoverflow.com/questions/67508090/checkstyle-gradle-use-google-checks
	// https://github.com/gradle/gradle/issues/28408
	// https://github.com/checkstyle/checkstyle/blob/checkstyle-10.14.0/src/main/resources/google_checks.xml
	// https://stackoverflow.com/questions/28749804/how-to-compile-project-with-google-checkstyle-rules-with-gradle <-- this one works
	id 'checkstyle'

	// https://docs.openrewrite.org/running-recipes/getting-started
	// automatically format and lint your code
	// in addition to spotless, checkStyle, findBugs and sonarling
	// in addition to spotless, checkStyle, findBugs and sonarlint
	// adds command gradlew rewriteRun
	// added as command in npm run --format
	// TODO: read more
	id 'org.openrewrite.rewrite' version '6.14.0'



	// https://spotbugs.readthedocs.io/en/latest/gradle.html
	id "com.github.spotbugs" version "6.0.14"

	// https://plugins.gradle.org/plugin/name.remal.sonarlint
	// https://github.com/remal-gradle-plugins/sonarlint
	// https://plugins.gradle.org/search?term=sonarlint
	// https://remal.gitlab.io/gradle-plugins/
	id "name.remal.sonarlint" version "4.2.1"

	// or
	// https://github.com/Lucas3oo/sonarlint-gradle-plugin
	// id "se.solrike.sonarlint" version "2.0.0"

	// PIT
	// https://github.com/szpak/gradle-pitest-plugin
	// pit requires project.group
	id 'info.solidsoft.pitest' version '1.15.0'
}

// ### CHECKSTYLE

// doesn't work
// https://stackoverflow.com/questions/67508090/checkstyle-gradle-use-google-checks
// checkstyle {
//     def archive = configurations.checkstyle.resolve().find {
//         it.name.startsWith("checkstyle")
//     }
//     config = resources.text.fromArchiveEntry(archive, "google_checks.xml")
// }

// https://stackoverflow.com/questions/28749804/how-to-compile-project-with-google-checkstyle-rules-with-gradle
// configurations {
// 	checkstyleConfig
// }
// dependencies {
// 	checkstyleConfig("com.puppycrawl.tools:checkstyle:8.29") { transitive = false }
// 	// checkstyle "com.puppycrawl.tools:checkstyle:8.29"
// }
checkstyle {
	// 	toolVersion '8.29'
	// 	config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')
	// 	// configFile = file('config/checkstyle/checkstyle.xml')
	// 	// make build/check fail if we have any violations
	ignoreFailures = false
	maxWarnings = 0
}
// tasks.withType(Checkstyle) {
// 	checkstyleClasspath = project.configurations.checkstyleOverride
// }

// ### REWRITE

dependencies {
	rewrite("org.openrewrite.recipe:rewrite-static-analysis:1.7.0")
}
rewrite {
	activeRecipe("org.openrewrite.staticanalysis.CodeCleanup")
}

// ### PIT

pitest {
	//adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
	// required to make pitest work with junit 5
	junit5PluginVersion = '1.2.1'
	pitestVersion = '1.15.2'
}


// ### SPOTLESS

// https://stackoverflow.com/questions/57261461/gradle-build-failes-getting-an-error-checkstylemain-failed

// formatter and linter
// https://github.com/diffplug/spotless/issues/178
// <https://github.com/diffplug/spotless/tree/main/plugin-gradle>
// some examples:
// https://dev.to/ankityadav33/standardize-code-formatting-with-spotless-2bdh
// spotless config
spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	// ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'
		targetExclude 'build/**/*', 'node_modules/**/*', 'target/**/*', 'out/**/*', 'dist/**/*', 'bin/**/*'
		trimTrailingWhitespace() // in the pre-commit hook too
		indentWithTabs()
		endWithNewline()
	}
	format 'xml', {
		target '**/*.xml' // must specify target
		targetExclude 'build/**/*', 'node_modules/**/*', 'target/**/*', 'out/**/*', 'dist/**/*', 'bin/**/*'
		eclipseWtp('xml')     // must specify a type (table below)
		// eclipseWtp('xml', '11.0') // optional version, others at https://download.eclipse.org/tools/cdt/releases/
		// you can also specify an arbitrary number of config files
		// eclipseWtp('xml').configFile('spotless.xml.prefs', 'spotless.common.properties'
	}
	format 'styling', {
		targetExclude 'build/**/*', 'node_modules/**/*', 'target/**/*', 'out/**/*', 'dist/**/*', 'bin/**/*'
		target  '**/*.json', '**/*.yaml', '**/*.toml', '**/*.js', '**/*.cjs', '**/*.mjs'

		prettier(['prettier-plugin-toml': '2.0.1']).config(['plugins': ['prettier-plugin-toml']])
	}
	groovy {
		// Use the default importOrder configuration
		importOrder()
		// optional: you can specify import groups directly
		// note: you can use an empty string for all the imports you didn't specify explicitly, and '\\#` prefix for static imports
		// importOrder('java', 'javax', 'com.acme', '', '\\#com.acme', '\\#')
		// optional: instead of specifying import groups directly you can specify a config file
		// export config file: https://github.com/diffplug/spotless/blob/main/ECLIPSE_SCREENSHOTS.md#creating-spotlessimportordergradl
		// importOrderFile('eclipse-import-order.txt') // import order file as exported from eclipse
		// removes semicolons at the end of lines
		removeSemicolons()
		// the Groovy Eclipse formatter extends the Java Eclipse formatter,
		// so it formats Java files by default (unless `excludeJava` is used).
		greclipse() // has its own section below

		// Add a license header to all files
		// licenseHeader('/* (C) $YEAR */') // or licenseHeaderFile

		//---- Below is for `groovy` only ----

		// excludes all Java sources within the Groovy source dirs from formatting
		// excludeJava()
	}
	groovyGradle {
		target '*.gradle' // default target of groovyGradle
		targetExclude 'build/**/*', 'node_modules/**/*', 'target/**/*', 'out/**/*', 'dist/**/*', 'bin/**/*'
		greclipse()
	}
	java {
		// Use the default importOrder configuration
		importOrder()

		// optional: you can specify import groups directly
		// note: you can use an empty string for all the imports you didn't specify explicitly, '|' to join group without blank line, and '\\#` prefix for static imports
		// importOrder('java|javax', 'com.acme', '', '\\#com.acme', '\\#')
		// optional: instead of specifying import groups directly you can specify a config file
		// export config file: https://github.com/diffplug/spotless/blob/main/ECLIPSE_SCREENSHOTS.md#creating-spotlessimportorder
		// importOrderFile('eclipse-import-order.txt') // import order file as exported from eclipse

		removeUnusedImports()

		// Cleanthat will refactor your code, but it may break your style: apply it before your formatter
		cleanthat()

		trimTrailingWhitespace()
		endWithNewline()

		// Choose one of these formatters.
		googleJavaFormat()   // has its own section below
		// or apply a specific version of google-java-format
		// googleJavaFormat('1.8').aosp().reflowLongStrings().skipJavadocFormatting()
		// eclipse()            // has its own section below
		// prettier()           // has its own section below
		// clangFormat()        // has its own section below

		formatAnnotations()  // fixes formatting of type annotations, see below

		// licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
	}
}


repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()
}


// ## section for publishing to maven central
// ./gradlew -Pversion=${version} publish
group = 'net.syn3rgy.core'

// ## Version
// the version is calculated automatically after a new github release is created
// it will grab the latest git tag and override the build.gradle version while publishing using
// cli command ./gradlew -Pversion=x.x.x publish
// version='0.0.1-SNAPSHOT'

// sourceSets {
//     main {
//         java {
//             srcDirs = ['src']
//         }
//     }
// }

// define the publish task for github actions
publishing {
	// https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-gradle
	// https://medium.com/@shanemyrick/publishing-to-github-packages-with-gradle-and-github-actions-4ad842634c4e
	// publications {
	// 	// https://docs.gradle.org/current/userguide/publishing_maven.html
	// 	maven(MavenPublication) {
	// 		// groupId = 'net.syn3rgy.core'
	// 		// artifactId = 'library'
	// 		// version = 'alpha-0.0.1'
	//
	// 		from components.java
	// 	}
	// }
	publications {
		gpr(MavenPublication) {
			from(components.java)
		}
	}
	repositories {
		maven {
			name = "GitHubPackages"
			url = "https://maven.pkg.github.com/gipo999/test-spi"
			credentials {
				username = System.getenv("GITHUB_ACTOR")
				password = System.getenv("GITHUB_TOKEN")
			}
			// credentials {
			// 	username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
			// 	password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
			// }
		}
		// maven {
		// 	name = 'OSSRH'
		// 	url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
		// 	// credentials are loaded from github secrets?
		// 	credentials {
		// 		username = System.getenv('MAVEN_USERNAME')
		// 		password = System.getenv('MAVEN_PASSWORD')
		// 	}
		// }
	}
}

dependencies {
	rewrite("org.openrewrite.recipe:rewrite-static-analysis:1.7.0")

	// Use JUnit Jupiter for testing.
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'

	// This dependency is exported to consumers, that is to say found on their compile classpath.
	api 'org.slf4j:slf4j-api:2.0.13'

	// This dependency is used internally, and not exposed to consumers on their own compile classpath.
	//implementation 'com.google.guava:guava:31.1-jre'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

tasks.named('test') {
	// Use JUnit Platform for unit tests.
	useJUnitPlatform()
}
